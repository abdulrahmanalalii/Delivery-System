# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gX3DQUgurztiKQ6h_A4-Ali1ZlD1apM7
"""

from tabulate import tabulate

class Item:
    """Represents an item in the inventory."""

    def __init__(self, code, description, price):
        """Initialize an item with a code, description, and unit price."""
        self._code = code
        self._description = description
        self._price = price

    # Getters
    def get_code(self):
        return self._code

    def get_description(self):
        return self._description

    def get_price(self):
        return self._price

    # Setters
    def set_price(self, price):
        self._price = price

class Cart:
    """Manages items selected by the user for purchase."""

    def __init__(self):
        """Initialize an empty cart."""
        self.items = []

    def add_item(self, item, quantity):
        """Add an item with quantity to the cart."""
        total_price = item.get_price() * quantity
        self.items.append([item.get_code(), item.get_description(), quantity, item.get_price(), total_price])

    def display_cart(self):
        """Display cart contents."""
        print("\nüõçÔ∏è Order Summary:")
        headers = ["Item Code", "Description", "Quantity", "Unit Price (AED)", "Total Price (AED)"]
        print(tabulate(self.items, headers, tablefmt="fancy_grid"))

    def calculate_totals(self):
        """Calculate subtotal, tax, and total cost."""
        subtotal = sum(item[4] for item in self.items)
        tax = round(subtotal * 0.05, 2)  # 5% tax
        total = subtotal + tax
        return subtotal, tax, total

class DeliveryNote:
    """Generates a delivery note for the purchase."""

    def __init__(self, recipient, contact, address, delivery_date, weight):
        """Initialize delivery details."""
        self.recipient = recipient
        self.contact = contact
        self.address = address
        self.delivery_date = delivery_date
        self.weight = weight

    def generate_note(self, subtotal, tax, total):
        """Print the delivery note."""
        print("\nüìÑ Delivery Note")
        print(f"Recipient: {self.recipient}")
        print(f"Contact: {self.contact}")
        print(f"Delivery Address: {self.address}")
        print(f"Delivery Date: {self.delivery_date}")
        print(f"Total Weight: {self.weight} kg")
        print(f"\nüí∞ Subtotal: AED {subtotal:.2f}")
        print(f"üßæ Taxes & Fees (5%): AED {tax:.2f}")
        print(f"‚úÖ Total Charges: AED {total:.2f}")

# Inventory items
items = [
    Item("ITM001", "Wireless Keyboard", 100.00),
    Item("ITM002", "Wireless Mouse & Pad Set", 75.00),
    Item("ITM003", "Laptop Cooling Pad", 120.00),
    Item("ITM004", "Camera Lock", 15.00)
]

# Display available items
print("\nüì¶ Available Items:")
headers = ["Item Code", "Description", "Unit Price (AED)"]
print(tabulate([[item.get_code(), item.get_description(), item.get_price()] for item in items], headers, tablefmt="fancy_grid"))

# Create a cart and add items
cart = Cart()
while True:
    code = input("\nEnter Item Code to add (or 'done' to finish): ").strip().upper()
    if code == "DONE":
        break
    quantity = int(input("Enter Quantity: "))

    # Find item and add to cart
    for item in items:
        if item.get_code() == code:
            cart.add_item(item, quantity)
            break
    else:
        print("‚ö†Ô∏è Item not found, try again.")

# Display cart summary and totals
cart.display_cart()
subtotal, tax, total = cart.calculate_totals()

# Create a delivery note and display
delivery_note = DeliveryNote("Sarah Johnson", "sarah.johnson@example.com",
                             "45 Knowledge Avenue, Dubai, UAE", "January 25, 2025", 7)
delivery_note.generate_note(subtotal, tax, total)